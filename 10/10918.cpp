#include <cstdio>

const char fez[41][5][6] = {
	{
		"#####",
		"..#..",
		"#...#",
		"#####",
		"#####"
	},
	{
		"#####",
		"#...#",
		"#.#.#",
		"....#",
		"#####"
	},
	{
		"#####",
		"###..",
		"###.#",
		"###..",
		"#####"
	},
	{
		"#####",
		"#####",
		"#####",
		"..###",
		"#.###"
	},
	{
		"#####",
		"..###",
		"#.###",
		"#....",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"....#",
		"#.#.#",
		"#####"
	},
	{
		"###.#",
		"##..#",
		"##.##",
		"##..#",
		"###.#"
	},
	{
		"#####",
		"#...#",
		"#.#.#",
		"#...#",
		"###.#"
	},
	{
		"#.#.#",
		"#...#",
		"#####",
		"#####",
		"#####"
	},
	{
		"#####",
		"#####",
		"#####",
		"###..",
		"###.#"
	},
	{
		"###.#",
		"###.#",
		"###.#",
		"#...#",
		"#.###"
	},
	{
		"#####",
		"#...#",
		"##.##",
		"#...#",
		"##.##",
	},
	{
		"#####",
		"#####",
		"#...#",
		"..#..",
		"#####"
	},
	{
		"#####",
		"#....",
		"#.#.#",
		"#...#",
		"#####"
	},
	{
		"#####",
		"..###",
		"#.###",
		"..###",
		"#####"
	},
	{
		"###.#",
		"###..",
		"#####",
		"#####",
		"#####"
	},
	{
		"#####",
		"....#",
		"###.#",
		"###..",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"#....",
		"#.#.#",
		"#####"
	},
	{
		"#.###",
		"#..##",
		"##.##",
		"#..##",
		"#.###"
	},
	{
		"#.###",
		"#...#",
		"#.#.#",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#####",
		"#####",
		"#...#",
		"#.#.#"
	},
	{
		"#.###",
		"..###",
		"#####",
		"#####",
		"#####"
	},
	{
		"###.#",
		"#...#",
		"#.###",
		"#.###",
		"#.###"
	},
	{
		"##.##",
		"#...#",
		"##.##",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"#...#",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"#.#.#",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"#.###",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"#.#.#",
		"#.#.#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"###.#",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"#.###",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"#.#.#",
		"#.#.#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"###.#",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"#.###",
		"#.#.#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"#####",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"#.###",
		"#.#.#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"###.#",
		"#.#.#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"#####",
		"#...#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"###.#",
		"#.#.#",
		"#####"
	},
	{
		"#####",
		"#...#",
		"#####",
		"#.#.#",
		"#####"
	},
	{
		"#####",
		"#.#.#",
		"#####",
		"#.#.#",
		"#####"
	},
	{
		".....",
		".....",
		".....",
		".....",
		"....."
	}
};

const char translate[41][10] = {
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h",
	"i",
	"j",
	"kq",
	"l",
	"m",
	"n",
	"o",
	"p",
	"z",
	"r",
	"s",
	"t",
	"uv",
	"w",
	"x",
	"y",
	"0",
	"1",
	"2",
	"3",
	"4",
	"3",
	"4",
	"5",
	"5",
	"6",
	"6",
	"7",
	"7",
	"8",
	"9",
	"10",
	"_"
};

int r, c;
char stone[340][340];

int main()
{
	scanf("%d %d", &r, &c);
	for(int i=0; i<r*6-1; ++i)
		scanf("%s", stone[i]);

	for(int j=c-1; j>=0; --j)
	{
		for(int i=0; i<r; ++i)
		{
			for(int k=0; k<41; ++k)
			{
				bool same = true;
				for(int x=0; x<5 && same; ++x)
					for(int y=0; y<5 && same; ++y)
						if(fez[k][x][y] != stone[i*6+x][j*6+y])
							same = false;
				if(same)
				{
					printf("%s", translate[k]);
					break;
				}
			}
		}
		printf("\n");
	}
	return 0;
}
